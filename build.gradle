buildscript {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
        jcenter()
        maven { 
            url "https://repo.spring.io/libs-milestone" 
            mavenContent { releasesOnly() }
        }
        maven { 
            url "https://repo.spring.io/libs-snapshot" 
            mavenContent { snapshotsOnly() }
        }
        maven { 
            url "https://plugins.gradle.org/m2/" 
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleMavenPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleLombokPluginVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { 
        url "https://oss.sonatype.org/content/repositories/snapshots" 
        mavenContent { snapshotsOnly() }
    }
    maven { 
        mavenContent { releasesOnly() }
        url "https://build.shibboleth.net/nexus/content/repositories/releases/" 
    }
    maven { 
        mavenContent { releasesOnly() }
        url "https://repo.spring.io/milestone/" 
    }
    maven { 
        url "https://repo.spring.io/snapshot/" 
        mavenContent { snapshotsOnly() }
    }
    maven { 
        mavenContent { snapshotsOnly() }
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local" 
    }
}

def casServerVersion = project.'cas.version'
def casWebApplicationBinaryName = "cas.war"

project.ext."casServerVersion" = casServerVersion
project.ext."casWebApplicationBinaryName" = casWebApplicationBinaryName

apply plugin: "war"
apply plugin: "io.freefair.war-overlay"

apply from: rootProject.file("gradle/tasks.gradle")
apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/dockerjib.gradle")

apply plugin: "io.freefair.lombok"
lombok {
    config["config.stopBubbling"] = "true"
    config["lombok.addLombokGeneratedAnnotation"] = "true"
    config["lombok.equalsAndHashCode.doNotUseGetters"] = "true"
    config["lombok.log.fieldName"] = "LOGGER"
    config["lombok.log.fieldIsStatic"] = "true"
    config["lombok.toString.doNotUseGetters"] = "true"
}

apply plugin: "eclipse"
eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

apply plugin: "idea"
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.projectKey", "CenterForOpenScience_osf-cas"
        property "sonar.organization", "centerforopenscience"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

dependencies {
    // Other CAS dependencies/modules may be listed here...

    // JSON Service Registry
    implementation "org.apereo.cas:cas-server-support-json-service-registry:${project.'cas.version'}"

    // Core Utilities
    implementation "org.apereo.cas:cas-server-core-util-api:${project.'cas.version'}"

    // Web and Requests
    implementation "org.apereo.cas:cas-server-core-web-api:${project.'cas.version'}"

    // Web Flow Customization
    implementation "org.apereo.cas:cas-server-core-webflow:${project.'cas.version'}"
    implementation "org.apereo.cas:cas-server-core-webflow-api:${project.'cas.version'}"
    implementation "org.apereo.cas:cas-server-support-actions:${project.'cas.version'}"

    // Authentication Customization
    implementation "org.apereo.cas:cas-server-core-authentication:${project.'cas.version'}"
    implementation "org.apereo.cas:cas-server-core-authentication-api:${project.'cas.version'}"
    implementation "org.apereo.cas:cas-server-core-authentication-mfa-api:${project.'cas.version'}"

    // Authentication Delegation: Vanilla
    implementation "org.apereo.cas:cas-server-support-pac4j-webflow:${project.'cas.version'}"
    // Authentication Delegation: Customization
    implementation "org.apereo.cas:cas-server-support-pac4j-core:${project.'cas.version'}"

    // JDBC Drivers
    implementation "org.apereo.cas:cas-server-support-jdbc-drivers:${project.'cas.version'}"

    // JPA OSF PostgreSQL
    implementation "org.apereo.cas:cas-server-support-jpa-util:${project.'cas.version'}"

    // JPA Ticket Registry
    implementation "org.apereo.cas:cas-server-support-jpa-ticket-registry:${project.'cas.version'}"

    // Tomcat Catalina
    implementation "org.apache.tomcat:tomcat-catalina:${springBootTomcatVersion}"

    // Hibernate
    implementation "org.hibernate:hibernate-core:${hibernateCoreVersion}"

    // Google GSON
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // Javascript Object Signing and Encryption (JOSE) and JSON Web Tokens (JWT)
    implementation "com.nimbusds:nimbus-jose-jwt:${nimbusJoseVersion}"

    // Apache HttpComponents Client fluent API
    implementation "org.apache.httpcomponents:fluent-hc:${fluentHcVersion}"
}

tasks.findByName("jibDockerBuild")
    .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
    .finalizedBy(deleteWebAppFromJib)

tasks.findByName("jib")
    .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
    .finalizedBy(deleteWebAppFromJib)

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"

        preferProjectModules()

        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}
